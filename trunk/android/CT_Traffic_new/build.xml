<?xml version="1.0" encoding="UTF-8"?>
<project name="CT_Traffic" basedir="." xmlns:ac="antlib:net.sf.antcontrib">
	<target name="prj.define" description="系统变量定义">
		<echo message="Project Define variable" />
		<property file="project.properties" />
		<property file="build-properties.txt" />
		<property name="android-framework" value="${android.platform.home}/framework.aidl" />
		<taskdef resource="antenna.properties">
			<classpath location="${antenna.lib}" />
		</taskdef>
		<property name="resource-dir" value="res" />
		<property name="asset-dir" value="assets" />
		<property name="srcdir" value="${app.build.preprocess.src}" />
		<property name="outdir" value="${output}" />
		<tstamp>
			<format property="DSTAMP" pattern="yyyyMMdd" />
		</tstamp>
		<condition property="srcdir-ospath" value="${basedir}\${srcdir}" else="${basedir}/${srcdir}">
			<os family="windows" />
		</condition>
		<property name="external-libs" value="libs" />
		<condition property="external-libs-ospath" value="${basedir}\${external-libs}" else="${basedir}/${external-libs}">
			<os family="windows" />
		</condition>
		<condition property="armeabi-libs-ospath" value="${basedir}\${external-libs}\armeabi" else="${basedir}/${external-libs}/armeabi">
			<os family="windows" />
		</condition>
		<!-- Output directories -->
		<property name="outdir-classes" value="${outdir}/classes" />
		<property name="outdir-classes-optimized" value="${outdir}/optimized-classes" />
		<condition property="outdir-classes-ospath" value="${basedir}\${outdir-classes}" else="${basedir}/${outdir-classes}">
			<os family="windows" />
		</condition>
		<!--
			<condition property="zipalign-package-ospath" value="${basedir}\${output.dir}\${app.name}_android_${android_version}_${app.version}_${channel_id}_${temp.dir}_build(${app.buildcount}).apk" else="${basedir}/${output.dir}">
			-->
		<condition property="zipalign-package-ospath" value="${basedir}\${outdir}\${app.name}_android_${android.version}_${app.version.name}_${app.version.code}_${DSTAMP}_${debug.level}.apk" else="${basedir}/${outdir}">
			<os family="windows" />
		</condition>
		<property name="outdir-r" value="${app.build.preprocess.src}" />
		<!-- Intermediate files -->
		<property name="dex-file" value="classes.dex" />
		<property name="intermediate-dex" value="${outdir}/${dex-file}" />
		<condition property="intermediate-dex-ospath" value="${basedir}\${intermediate-dex}" else="${basedir}/${intermediate-dex}">
			<os family="windows" />
		</condition>
		<!-- The final package file to generate -->
		<property name="resources-package" value="${outdir}/${ant.project.name}.ap_" />
		<condition property="resources-package-ospath" value="${basedir}\${resources-package}" else="${basedir}/${resources-package}">
			<os family="windows" />
		</condition>

		<property name="out-debug-package" value="${outdir}/${ant.project.name}.apk" />
		<condition property="out-debug-package-ospath" value="${basedir}\${out-debug-package}" else="${basedir}/${out-debug-package}">
			<os family="windows" />
		</condition>

		<property name="out-unsigned-package" value="${outdir}/${ant.project.name}-unsigned.apk" />
		<property name="out-signed-package" value="${outdir}/${ant.project.name}-signed.apk" />
		<condition property="out-unsigned-package-ospath" value="${basedir}\${out-unsigned-package}" else="${basedir}/${out-unsigned-package}">
			<os family="windows" />
		</condition>
		<condition property="out-signed-package-ospath" value="${basedir}\${out-signed-package}" else="${basedir}/${out-signed-package}">
			<os family="windows" />
		</condition>
		<!-- Tools -->
		<condition property="aapt" value="${android.platform-tools}/aapt.exe" else="${android.platform-tools}/aapt">
			<os family="windows" />
		</condition>
		<condition property="zipalign" value="${android.tools}/zipalign.exe" else="${android.tools}/zipalign">
			<os family="windows" />
		</condition>
		<condition property="jarsigner" value="${jdk.bin}/jarsigner.exe" else="${jdk.bin}/jarsigner">
			<os family="windows" />
		</condition>
		<condition property="aidl" value="${android.platform-tools}/aidl.exe" else="${android.platform-tools}/aidl">
			<os family="windows" />
		</condition>
		<condition property="adb" value="${android.platform-tools}/adb.exe" else="${android.platform-tools}/adb">
			<os family="windows" />
		</condition>
		<condition property="dx" value="${android.platform-tools}/dx.bat" else="${android.platform-tools}/dx">
			<os family="windows" />
		</condition>
		<condition property="apk-builder" value="${android.tools}/apkbuilder.bat" else="${android.tools}/apkbuilder">
			<os family="windows" />
		</condition>
		<property name="android-jar" value="${android.platform.home}/android.jar" />
	</target>
	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                     
         - - - - - - - - - - - - - - - - - -->
	<target name="clean" depends="prj.define">
		<echo message="clean directory" />
		<delete dir="${app.build}" />
		<delete dir="${outdir-classes}" />
		<delete dir="${outdir-classes-optimized}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: dirs                     
         - - - - - - - - - - - - - - - - - -->
	<target name="dirs" depends="clean">
		<echo message="create directory" />
		<mkdir dir="${app.build}" />
		<mkdir dir="${app.build.src}" />
		<mkdir dir="${app.build.preprocess.src}" />
		<mkdir dir="${outdir}" />
		<mkdir dir="${outdir-classes}" />
		<mkdir dir="${outdir-classes-optimized}" />
		<copy todir="${app.build.src}">
			<fileset dir="src">
				<include name="**" />
			</fileset>
			<fileset dir="actionbarsherlock">
				<include name="**" />
			</fileset>
		</copy>
	</target>
	<target name="preprocess" depends="dirs">
		<echo message="Preprocess" />
		<wtkpreprocess srcdir="${app.build.src}" destdir="${app.build.preprocess.src}" debuglevel="${debug.level}" encoding="${app.src.encoding}" printsymbols="true" symbols="APP_AIRPORT='${app.airport}',APP_AIRPORT_CODE='${app.airport.code}',VERSION='${app.version.name}',APP_REGISTER_SIGN='${app.register.sign}',APP_CHANNEL='${app.channel}',APP_KEY='${app.key}',APP_IS_SERVERURL_TEST='${app.is.serverurl.test}',APP_DOMAINS='${app.domains}'" verbose="true">
			<symbols_file name="${basedir}/ant.symbols" />
		</wtkpreprocess>
		<copy todir="${app.build.preprocess.src}">
			<fileset dir="${app.build.src}">
				<include name="**/*.aidl" />
			</fileset>
		</copy >
	</target>
	<!-- Generate the R.java file for this project's resources. -->
	<target name="resource-src" depends="preprocess">
		<echo>Generating R.java / Manifest.java from the resources...</echo>

		<replaceregexp file="AndroidManifest.xml" byline="true" match='android:versionCode="(.*)"' replace='android:versionCode="${app.version.code}"' />
		<replaceregexp file="AndroidManifest.xml" byline="true" match='android:versionName="(.*)"' replace='android:versionName="${app.version.name}"' />

		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-m" />
			<arg value="-J" />
			<arg value="${outdir-r}" />
			<arg value="-M" />
			<arg value="AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="--version-name" />
			<arg value="${app.version.name}" />
			<arg value="--version-code" />
			<arg value="${app.version.code}" />
		</exec>
	</target>

	<!-- Generate java classes from .aidl files. -->
	<target name="aidl" depends="preprocess">
		<echo>Compiling aidl files into Java classes...</echo>
		<apply executable="${aidl}" failonerror="true">
			<arg value="-p${android-framework}" />
			<arg value="-I${srcdir}" />
			<fileset dir="${srcdir}">
				<include name="**/*.aidl" />
			</fileset>
		</apply>
	</target>
	<!-- Compile this project's .java files into .class files. -->
	<target name="compile" depends="preprocess, resource-src, aidl">
		<javac encoding="UTF-8" target="1.6" debug="true" extdirs="" srcdir="${app.build.preprocess.src}" destdir="${outdir-classes}" bootclasspath="${android-jar}">
			<classpath>
				<!--<fileset dir="${external-libs}" includes="*.jar" />-->
				<fileset dir="${external-libs}" includes="android-support-v4.jar" />
				<fileset dir="${external-libs}" includes="core.jar" />
				<fileset dir="${external-libs}" includes="geocoder_location.jar" />
				<fileset dir="${external-libs}" includes="map.jar" />
				<fileset dir="${external-libs}" includes="poisearch_route.jar" />
				<fileset dir="${external-libs}" includes="gson-1.7.1.jar" />
			</classpath>
		</javac>
	</target>
	<target name="optimize" unless="nooptimize" depends="compile">
		<echo>start proguard...</echo>
		<jar basedir="${outdir-classes}" destfile="temp.jar" />
		<java jar="${proguard.jar}" fork="true" failonerror="true">
			<jvmarg value="-Dmaximum.inlined.code.length=32" />
			<arg value="@${proguard.cfg}" />
			<arg value="-injars temp.jar" />
			<arg value="-outjars optimized.jar" />
			<arg value="-libraryjars ${android-jar}" />
		</java>
		<delete file="temp.jar" />
		<delete dir="${outdir-classes}" />
		<mkdir dir="${outdir-classes}" />
		<unzip src="optimized.jar" dest="${outdir-classes}" />
		<delete file="optimized.jar" />
	</target>
	<!-- Convert this project's .class files into .dex files. -->
	<target name="dex" depends="optimize">
		<echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>
		<apply executable="${dx}" failonerror="true" parallel="true">
			<arg value="--dex" />
			<arg value="--output=${intermediate-dex-ospath}" />
			<arg path="${outdir-classes-ospath}" />
			<fileset dir="${external-libs}" includes="*.jar" />
		</apply>
	</target>
	<!-- Put the project's resources into the output package file. -->
	<target name="package-res-and-assets">
		<echo>Packaging resources and assets...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-A" />
			<arg value="${asset-dir}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="-F" />
			<arg value="${resources-package}" />
			<arg value="--version-name" />
			<arg value="${app.version.name}" />
			<arg value="--version-code" />
			<arg value="${app.version.code}" />
		</exec>

	</target>

	<!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
	<target name="package-res-no-assets">
		<echo>Packaging resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="AndroidManifest.xml" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<!-- No assets directory -->
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="-F" />
			<arg value="${resources-package}" />
			<arg value="--version-name" />
			<arg value="${app.version.name}" />
			<arg value="--version-code" />
			<arg value="${app.version.code}" />
		</exec>
	</target>

	<!-- Invoke the proper target depending on whether or not
		         an assets directory is present. -->
	<!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
		         only when the assets dir exists. -->
	<target name="package-res">
		<available file="${asset-dir}" type="dir" property="res-target" value="and-assets" />
		<property name="res-target" value="no-assets" />
		<antcall target="package-res-${res-target}" />
		<!--	<exec executable="${aapt}" failonerror="true">
			<arg value="add" />
			<arg value="-v" />
			<arg value="${resources-package}" />
			<arg value="${basedir}\libcontact.so" />
		</exec>-->
	</target>
	<!-- Package the application and sign it with a debug key.
				 This is the default target when building. It is used for debug. -->
	<target name="debug" depends="dex, package-res">
		<echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
		<!--<replaceregexp file="AndroidManifest.xml" byline="true" encoding="app.src.encoding" match='android:value="${app.channel}"' replace='android:value="app.channel"' />
		-->
		<exec executable="${apk-builder}" failonerror="true">
			<arg value="${out-debug-package-ospath}" />
			<arg value="-z" />
			<arg value="${resources-package-ospath}" />
			<arg value="-f" />
			<arg value="${intermediate-dex-ospath}" />
			<arg value="-rf" />
			<arg value="${srcdir-ospath}" />
			<arg value="-rj" />
			<arg value="${external-libs-ospath}" />
			<arg value="-nf" />
			<arg value="${armeabi-libs-ospath}" />
		</exec>
	</target>

	<!-- Package the application without signing it.
		    	 This allows for the application to be signed later with an official publishing key. -->
	<target name="release" depends="dex, package-res">
		<echo>Packaging ${out-unsigned-package} for release...</echo>
		<!--
		<replaceregexp file="AndroidManifest.xml" byline="true" encoding="app.src.encoding" match='android:value="${app.channel}"' replace='android:value="app.channel"' />
		-->
		<exec executable="${apk-builder}" failonerror="true">
			<arg value="${out-unsigned-package-ospath}" />
			<arg value="-u" />
			<arg value="-z" />
			<arg value="${resources-package-ospath}" />
			<arg value="-f" />
			<arg value="${intermediate-dex-ospath}" />
			<arg value="-rf" />
			<arg value="${srcdir-ospath}" />
			<arg value="-rj" />
			<arg value="${external-libs-ospath}" />
			<arg value="-nf" />
			<arg value="${external-libs-ospath}" />
		</exec>
		<echo>It will need to be signed with jarsigner before being published.</echo>
	</target>

	<target name="debug_level" depends="dex, package-res">
		<!--
			<replaceregexp file="AndroidManifest.xml" byline="true" encoding="app.src.encoding" match='android:value="${app.channel}"' replace='android:value="app.channel"' />
			-->
		<if>
			<equals arg1="${debug.level}" arg2="release" />
			<echo>Packaging ${out-unsigned-package} for release...</echo>
			<then>
				<exec executable="${apk-builder}" failonerror="true">
					<arg value="${out-unsigned-package-ospath}" />
					<arg value="-u" />
					<arg value="-z" />
					<arg value="${resources-package-ospath}" />
					<arg value="-f" />
					<arg value="${intermediate-dex-ospath}" />
					<arg value="-rf" />
					<arg value="${srcdir-ospath}" />
					<arg value="-rj" />
					<arg value="${external-libs-ospath}" />
					<arg value="-nf" />
					<arg value="${external-libs-ospath}" />
				</exec>
				<echo>It will need to be signed with jarsigner before being published.</echo>
			</then>
			<else>
				<echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
				<!--<replaceregexp file="AndroidManifest.xml" byline="true" encoding="app.src.encoding" match='android:value="${app.channel}"' replace='android:value="app.channel"' />
		                    			-->
				<exec executable="${apk-builder}" failonerror="true">
					<arg value="${out-debug-package-ospath}" />
					<arg value="-z" />
					<arg value="${resources-package-ospath}" />
					<arg value="-f" />
					<arg value="${intermediate-dex-ospath}" />
					<arg value="-rf" />
					<arg value="${srcdir-ospath}" />
					<arg value="-rj" />
					<arg value="${external-libs-ospath}" />
					<arg value="-nf" />
					<arg value="${armeabi-libs-ospath}" />
				</exec>
			</else>
		</if>
	</target>

	<!--进行签名-->
	<target name="jarsigner" depends="release">
		<echo>sign package and compile ......</echo>
		<exec executable="${jarsigner}" failonerror="true">
			<arg line="-verbose -digestalg SHA1 -sigalg MD5withRSA" />
			<arg value="-storepass" />
			<arg value="${password}" />
			<arg value="-keystore" />
			<arg value="${keystore}" />
			<arg value="-signedjar" />
			<arg value="${out-signed-package-ospath}" />
			<arg value="${out-unsigned-package-ospath}" />
			<arg value="${key.name}" />
		</exec>
	</target>
	<!--进行优化-->
	<target name="zipalign" depends="jarsigner">
		<exec executable="${zipalign}" failonerror="true">
			<arg value="-v" />
			<arg value="-f" />
			<arg value="4" />
			<arg value="${out-signed-package-ospath}" />
			<arg value="${zipalign-package-ospath}" />
		</exec>
	</target>
</project>